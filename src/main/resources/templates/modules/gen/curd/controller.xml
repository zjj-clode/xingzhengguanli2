<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>src/main/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
	<fileName>${ClassName}Controller.java</fileName>
	<content><![CDATA[
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;
import com.thinkgem.jeesite.common.config.Global;
import java.util.List;
import java.util.ArrayList;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.google.common.collect.Lists;

import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.common.utils.DateUtils;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.common.utils.excel.ExportExcel;
import com.thinkgem.jeesite.common.utils.excel.ImportExcel;
import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;

/**
 * ${functionName}Controller
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Controller
@RequestMapping(value = "${r"${adminPath}"}/${urlPrefix}")
public class ${ClassName}Controller extends BaseController {

	private static final String FUNCTION_NAME_SIMPLE = "${functionNameSimple}";

	@Autowired
	private ${ClassName}Service ${className}Service;
	
	@ModelAttribute
	public ${ClassName} get(@RequestParam(required=false) String id) {
		${ClassName} entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = ${className}Service.get(id);
		}
		if (entity == null){
			entity = new ${ClassName}();
		}
		return entity;
	}
	
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = {"list", ""})
	public String list(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<${ClassName}> page = ${className}Service.findPage(new Page<${ClassName}>(request, response), ${className}); 
		model.addAttribute("page", page);
		model.addAttribute("ename", "${className}");
		setBase64EncodedQueryStringToEntity(request, ${className});
		return "${lastPackageName}/${urlPrefix}/${className}List";
	}

	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = "form")
	public String form(${ClassName} ${className}, Model model) {
		model.addAttribute("${className}", ${className});
		model.addAttribute("ename", "${className}");
		return "${lastPackageName}/${urlPrefix}/${className}Form";
	}

	@RequiresPermissions("${permissionPrefix}:edit")
	@RequestMapping(value = "save")
	public String save(${ClassName} ${className}, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, ${className})){
			return form(${className}, model);
		}
		addMessage(redirectAttributes, StringUtils.isBlank(${className}.getId()) ? "保存"+FUNCTION_NAME_SIMPLE+"成功" : "修改"+FUNCTION_NAME_SIMPLE+"成功");
		${className}Service.save(${className});
		return "redirect:"+adminPath+"/${viewPrefix}/?repage&" + StringUtils.trimToEmpty(getBase64DecodedQueryStringFromEntity(${className}));
	}
	
	@RequiresPermissions("${permissionPrefix}:edit")
	@RequestMapping(value = "disable")
	public String disable(${ClassName} ${className}, RedirectAttributes redirectAttributes) {
		${className}Service.disable(${className});
		addMessage(redirectAttributes, "禁用"+FUNCTION_NAME_SIMPLE+"成功");
		return "redirect:"+adminPath+"/${viewPrefix}/?repage&" + StringUtils.trimToEmpty(getBase64DecodedQueryStringFromEntity(${className}));
	}
	
	@RequiresPermissions("${permissionPrefix}:edit")
	@RequestMapping(value = "delete")
	public String delete(${ClassName} ${className}, RedirectAttributes redirectAttributes) {
		${className}Service.delete(${className});
		addMessage(redirectAttributes, "删除"+FUNCTION_NAME_SIMPLE+"成功");
		return "redirect:"+adminPath+"/${viewPrefix}/?repage&" + StringUtils.trimToEmpty(getBase64DecodedQueryStringFromEntity(${className}));
	}
	
	@RequiresPermissions("${permissionPrefix}:edit")
	@RequestMapping(value = "deleteBatch")
	public String deleteBatch(${ClassName} ${className}, RedirectAttributes redirectAttributes) {
		${className}Service.deleteByIds(${className});
		addMessage(redirectAttributes, "批量删除"+FUNCTION_NAME_SIMPLE+"成功");
		return "redirect:"+adminPath+"/${viewPrefix}/?repage&" + StringUtils.trimToEmpty(getBase64DecodedQueryStringFromEntity(${className}));
	}
	
	/**
	 * 导出数据
	 */
	@RequiresPermissions("${permissionPrefix}:edit")
	@RequestMapping(value = "export", method = RequestMethod.POST)
	public String exportFile(${ClassName} ${className}, HttpServletRequest request,
			HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
			String fileName = FUNCTION_NAME_SIMPLE + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";
			${className}.setPage(new Page<${ClassName}>(request, response, -1));
			new ExportExcel(FUNCTION_NAME_SIMPLE, ${ClassName}.class).setDataList(${className}Service.findList(${className})).write(response, fileName).dispose();
			return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导出" + FUNCTION_NAME_SIMPLE + "失败！失败信息：" + e.getMessage());
			return "redirect:"+adminPath+"/${viewPrefix}/?repage&" + StringUtils.trimToEmpty(getBase64DecodedQueryStringFromEntity(${className}));
		}
	}

	/**
	 * 下载导入数据模板
	 */
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = "import/template")
	public String importFileTemplate(${ClassName} ${className}, HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
			String fileName = FUNCTION_NAME_SIMPLE + "导入模板.xlsx";
			List<${ClassName}> list = ${className}Service.findPage(new Page<${ClassName}>(1, 5), new ${ClassName}()).getList();
			if (list == null) {
				list = Lists.newArrayList();
			}
			if (list.size() < 1) {
				list.add(new ${ClassName}());
			}
			new ExportExcel(FUNCTION_NAME_SIMPLE, ${ClassName}.class).setDataList(list).write(response, fileName).dispose();
			return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入模板下载失败！失败信息：" + e.getMessage());
			return "redirect:"+adminPath+"/${viewPrefix}/?repage&" + StringUtils.trimToEmpty(getBase64DecodedQueryStringFromEntity(${className}));
		}
	}

	/**
	 * 导入数据<br>
	 */
	@RequiresPermissions("${permissionPrefix}:edit")
	@RequestMapping(value = "import", method = RequestMethod.POST)
	public String importFile(${ClassName} ${className}, MultipartFile file, RedirectAttributes redirectAttributes) {
		if(Global.isDemoMode()){
			addMessage(redirectAttributes, "演示模式，不允许操作！");
			return "redirect:"+adminPath+"/${viewPrefix}/?repage&" + StringUtils.trimToEmpty(getBase64DecodedQueryStringFromEntity(${className}));
		}
		try {
			long beginTime = System.currentTimeMillis();//1、开始时间  
			StringBuilder failureMsg = new StringBuilder();
			ImportExcel ei = new ImportExcel(file, 1, 0);
			List<${ClassName}> list = ei.getDataList(${ClassName}.class);
			List<${ClassName}> insertList=new ArrayList<${ClassName}>();
			List<${ClassName}> subList=new ArrayList<${ClassName}>();
			int batchinsertSize=500;
			int batchinsertCount=list.size()/batchinsertSize+(list.size()%batchinsertSize==0?0:1);
			int addNum=0;
			int updateNum=0;
			int toIndex=0;
			for(int i=0;i<batchinsertCount;i++)
			{
				insertList=new ArrayList<${ClassName}>();
			    toIndex=(i+1)*batchinsertSize;
			    if(toIndex>list.size())
			    	toIndex=list.size();
				subList=list.subList(i*batchinsertSize, toIndex);
				for(${ClassName} zsJh : subList)
				{
					zsJh.preInsert();
					insertList.add(zsJh);
				}
				
				if(insertList!=null&&insertList.size()>0)
				{
					System.out.println("insertList size is :"+insertList.size());
					${className}Service.batchInsertUpdate(insertList);
					addNum+=insertList.size();
				}
			}
			long endTime = System.currentTimeMillis(); 	//2、结束时间  
			addMessage(redirectAttributes, "执行时间"+DateUtils.formatDateTime(endTime - beginTime)+",导入 "+addNum+"条"+FUNCTION_NAME_SIMPLE+"信息,"+failureMsg);
			
			System.out.println("执行时间："+DateUtils.formatDateTime(endTime - beginTime));
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入"+FUNCTION_NAME_SIMPLE+"信息失败！失败信息："+e.getMessage());
		}
			return "redirect:"+adminPath+"/${viewPrefix}/?repage&" + StringUtils.trimToEmpty(getBase64DecodedQueryStringFromEntity(${className}));
		}
	
	
	
	
}]]>
	</content>
</template>